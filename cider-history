;; -*- coding: utf-8-unix -*-
;; Automatically written history of CIDER REPL session
;; Edit at your own risk

("(doc use)" "(doc require)" "(doc refer)" "(cider-turn-on-eldoc-mode)" "(ns clojure-noob.core)" "(+ 2 3)" "(ns clojure-noob.core)" "(ns user)" "(quote (1 1 1))" "(quote (1 2 3))" "(quote 1 2 3)" "'(1 2 3)" "(list 1 2 3)" "(1 2 3)" "(doc partial)" "(doc swap!)" "(doc foo)" "(doc if)" "(doc doc)" "(use 'clojure.repl)" "(doc foo)" "(doc if)" "*clojure-version*" "(ns playground.core)" "(for-test 1)" "(for-test 3)" "clear" "#'chapter-3.core/-main" "(+ 3 2)" "@(bounce.core/ask :!app)" "@(bc/ask :!app)" "(js/alert \"hello world\")" "(bounce.figwheel/cljs-repl (bounce.core/ask :cljs-compiler))" "(bounce.core/reload!)" "(bounce-core/reload!)" "(+ 2 3)" "(dissoc {:first \"hello\", :last \"world\"} :last)" "(assoc {:first \"hello\"} :last \"world\")" "(+ 2/3 4/2)" "(- 1 2 3 4)" "(/ 5 2)" "(reduce + 15 [1 2 3 4])" "(re-find #\"^left-\" \"12left-eye\")" "(re-find #\"left-\" \"12left-eye\")" "(re-find #\"left-\" \"left-eye\")" "(re-find #\"^left-\" \"left-eye\")" "(train)" "(-main)" "(square 7)" "(use 'training-day)" "(square 7)" "(use 'training-day)" "(square 10)" "(defn square [x] (* x x))" "(train)" "(* 2 3)" "(* 2 2)" "clear" "(* 1 3)" "clear" "(+ 2 2)" "clear" "(+ 1 2)" "(map)" "(println \"Cleanliness is next to godliness\")" "(reduce + [5 6 100])" "(map inc [1 2 3 4])" "(+ 1 2 3 4)" "(or false nil \"venti\" \"why\")" "(or false nil :large_I_mean_venti :why_cant_I_just_say_large)" "(= \"abc\" \"abc\")" "(+ 2 3)" "clear" "+ 1 * 5 + 4 5)) 3 4 5)" "(+ 1 (* 2 4) 3 4 5)" "q" "(map)" "(-main)" "(train)" "(-main)" "(reduce + [5 6 100])" "(map inc [1 2 3 4])" "(+ 1 2 3 4)")